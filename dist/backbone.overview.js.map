{"version":3,"sources":["../backbone.overview.js"],"names":[],"mappings":"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","file":"backbone.overview.js","sourcesContent":["/*!\n * Backbone.Overview\n *\n * Copyright (c) JC Brand <jc@opkode.com>\n * Licensed under the Mozilla Public License (MPL)\n */\nimport  {\n   chain, includes, debounce, detect,\n   difference, drop, each,\n   every, extend, filter,\n   find, first, forEach, get,\n   head, indexOf,\n   initial, invoke,\n   isEmpty, last, lastIndexOf,\n   map, max, min,\n   reduce, reduceRight,\n   reject, rest, sample,\n   shuffle, size,\n   some, sortBy, tail,\n   take, toArray, without\n} from 'lodash';\n\n\nconst View = Backbone.NativeView === undefined ? Backbone.View : Backbone.NativeView;\n\n\nconst Overview = Backbone.Overview = function (options) {\n   /* An Overview is a View that contains and keeps track of sub-views.\n   * Kind of like what a Collection is to a Model.\n   */\n   this.views = {};\n   this.keys = () => Object.keys(this.views);\n   this.getAll = () => this.views;\n   this.get = id => this.views[id];\n\n   /* Exclusive get. Returns all instances except the given id. */\n   this.xget = id => {\n      return this.keys()\n         .filter(k => (k !== id))\n         .reduce((acc, k) => {\n            acc[k] = this.views[k]\n            return acc;\n         }, {});\n   }\n\n   this.add = (id, view) => {\n      this.views[id] = view;\n      return view;\n   };\n\n   this.remove = id => {\n      if (typeof id === \"undefined\") {\n            new View().remove.apply(this);\n      }\n      const view = this.views[id];\n      if (view) {\n            delete this.views[id];\n            view.remove();\n            return view;\n      }\n   };\n\n   this.removeAll = () => {\n      this.keys().forEach(id => this.remove(id));\n      return this;\n   }\n\n   View.apply(this, Array.prototype.slice.apply(arguments));\n};\n\n\nconst methods = {\n   chain, includes, difference, drop,\n   every, filter, find,\n   first, forEach, head,\n   indexOf, initial, invoke, isEmpty,\n   last, lastIndexOf, map, max, min, reduce,\n   reduceRight, reject, rest, sample,\n   shuffle, size, some, sortBy, tail, take,\n   toArray, without\n}\nObject.keys(methods).forEach(name => {\n   Overview.prototype[name] = function() {\n      const args = Array.prototype.slice.call(arguments);\n      args.unshift(this.views);\n      return methods[name].apply(this, args);\n   };\n});\n\nextend(Overview.prototype, View.prototype);\nOverview.extend = View.extend;\n\n\nconst OrderedListView = Backbone.OrderedListView = Backbone.Overview.extend({\n   /* An OrderedListView is a special type of Overview which adds some\n    * methods and conventions for rendering an ordered list of elements.\n    */\n   // The `listItems` attribute denotes the path (from this View) to the\n   // list of items.\n   listItems: 'model',\n   // The `sortEvent` attribute specifies the event which should cause the\n   // ordered list to be sorted.\n   sortEvent: 'change',\n   // If false, we debounce sorting and inserting the new item\n   // (for improved performance when a large amount of items get added all at once)\n   // Otherwise we immediately sort the items and insert the new item.\n   sortImmediatelyOnAdd: false,\n   // The `listSelector` is the selector used to query for the DOM list\n   // element which contains the ordered items.\n   listSelector: '.ordered-items',\n   // The `itemView` is constructor which should be called to create a\n   // View for a new item.\n   ItemView: undefined,\n   // The `subviewIndex` is the attribute of the list element model which\n   // acts as the index of the subview in the overview.\n   // An overview is a \"Collection\" of views, and they can be retrieved\n   // via an index. By default this is the 'id' attribute, but it could be\n   // set to something else.\n   subviewIndex: 'id',\n\n   initialize () {\n      this.sortEventually = debounce(() => this.sortAndPositionAllItems(), 100);\n      this.items = get(this, this.listItems);\n      this.items.on('remove', this.removeView, this);\n      this.items.on('reset', this.removeAll, this);\n\n      this.items.on('add', (a, b) => {\n         if (this.sortImmediatelyOnAdd) {\n            this.sortAndPositionAllItems();\n         } else {\n            this.sortEventually();\n         }\n      });\n\n      if (this.sortEvent) {\n         this.items.on(this.sortEvent, this.sortEventually, this);\n      }\n   },\n\n   createItemView (item) {\n      let item_view = this.get(item.get(this.subviewIndex));\n      if (!item_view) {\n            item_view = new this.ItemView({model: item});\n            this.add(item.get(this.subviewIndex), item_view);\n      } else {\n            item_view.model = item;\n            item_view.initialize();\n      }\n      item_view.render();\n      return item_view;\n   },\n\n   removeView (item) {\n      this.remove(item.get(this.subviewIndex));\n   },\n\n   sortAndPositionAllItems () {\n      if (!this.items.length) {\n            return;\n      }\n      this.items.sort();\n\n      const list_el = this.el.querySelector(this.listSelector);\n      const div = document.createElement('div');\n      list_el.parentNode.replaceChild(div, list_el);\n      this.items.forEach(item => {\n            let view = this.get(item.get(this.subviewIndex));\n            if (!view) {\n               view = this.createItemView(item)\n            }\n            list_el.insertAdjacentElement('beforeend', view.el);\n      });\n      div.parentNode.replaceChild(list_el, div);\n   }\n});\n\nexport { OrderedListView, Overview }\n"]}